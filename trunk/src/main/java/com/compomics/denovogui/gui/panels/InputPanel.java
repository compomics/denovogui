package com.compomics.denovogui.gui.panels;

import com.compomics.denovogui.gui.DeNovoGUI;
import com.compomics.util.experiment.biology.Enzyme;
import com.compomics.util.experiment.biology.EnzymeFactory;
import com.compomics.util.experiment.biology.PTM;
import com.compomics.util.experiment.biology.PTMFactory;
import com.compomics.util.experiment.identification.SearchParameters;
import com.compomics.util.gui.waiting.WaitingHandler;
import com.compomics.util.preferences.ModificationProfile;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import javax.swing.JEditorPane;
import javax.swing.JProgressBar;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Thilo Muth
 * @author Harald Barsnes
 */
public class InputPanel extends javax.swing.JPanel implements WaitingHandler {

    /**
     * The compomics enzyme factory.
     */
    private EnzymeFactory enzymeFactory = EnzymeFactory.getInstance();
    /**
     * The compomics PTM factory.
     */
    private PTMFactory ptmFactory = PTMFactory.getInstance();
    /**
     * A references to the main frame.
     */
    private DeNovoGUI deNovoGUI;
    /**
     * indicates whether the run was canceled
     */
    private boolean runCanceled = false;

    /**
     * Creates a new InputPanel.
     * 
     * @param deNovoGUI a references to the main frame
     */
    public InputPanel(DeNovoGUI deNovoGUI) {
        initComponents();
        this.deNovoGUI = deNovoGUI;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        deNovoSearchPanel = new javax.swing.JPanel();
        inputFilesPanel = new javax.swing.JPanel();
        spectrumFilesLabel = new javax.swing.JLabel();
        spectrumFilesTextField = new javax.swing.JTextField();
        browseSpectrumFilesButton = new javax.swing.JButton();
        clearSpectrumFilesButton = new javax.swing.JButton();
        pepNovoLocationPanel = new javax.swing.JPanel();
        pepNovoLocationLabel = new javax.swing.JLabel();
        pepNovoLocationTextField = new javax.swing.JTextField();
        popNovoLocationBrowseButton = new javax.swing.JButton();
        outputFolderPanel = new javax.swing.JPanel();
        outputFolderLabel = new javax.swing.JLabel();
        outputFolderTextField = new javax.swing.JTextField();
        outputFolderBrowseButton = new javax.swing.JButton();
        loggingPanel = new javax.swing.JPanel();
        searchSettingsPanel = new javax.swing.JPanel();
        enzymeLabel = new javax.swing.JLabel();
        modelComboBox = new javax.swing.JComboBox();
        modelLabel = new javax.swing.JLabel();
        enzymeComboBox = new javax.swing.JComboBox();
        fragmentMassToleranceLabel = new javax.swing.JLabel();
        fragmentMassToleranceSpinner = new javax.swing.JSpinner();
        precursorMassToleranceLabel = new javax.swing.JLabel();
        precursorMassToleranceSpinner = new javax.swing.JSpinner();
        numberOfSolutionsLabel = new javax.swing.JLabel();
        numberOfSolutionsSpinner = new javax.swing.JSpinner();
        spectrumChargeCheckBox = new javax.swing.JCheckBox();
        spectrumPrecursorCheckBox = new javax.swing.JCheckBox();
        filterLowQualityCheckBox = new javax.swing.JCheckBox();
        modificationsPanel = new javax.swing.JPanel();
        modificationsTableScrollPane = new javax.swing.JScrollPane();
        modificationsTable = new javax.swing.JTable();
        configureModificationsButton = new javax.swing.JButton();
        deNovoProgressPanel = new javax.swing.JPanel();
        progressLabel = new javax.swing.JLabel();
        deNovoProgressBar = new javax.swing.JProgressBar();
        startButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        deNovoSearchPanel.setBackground(new java.awt.Color(230, 230, 230));

        inputFilesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Input Files"));
        inputFilesPanel.setOpaque(false);

        spectrumFilesLabel.setText("Spectrum File(s)");

        spectrumFilesTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spectrumFilesTextFieldActionPerformed(evt);
            }
        });

        browseSpectrumFilesButton.setText("Browse");
        browseSpectrumFilesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseSpectrumFilesButtonActionPerformed(evt);
            }
        });

        clearSpectrumFilesButton.setText("Clear");
        clearSpectrumFilesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearSpectrumFilesButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout inputFilesPanelLayout = new javax.swing.GroupLayout(inputFilesPanel);
        inputFilesPanel.setLayout(inputFilesPanelLayout);
        inputFilesPanelLayout.setHorizontalGroup(
            inputFilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputFilesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(spectrumFilesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spectrumFilesTextField)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(browseSpectrumFilesButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clearSpectrumFilesButton)
                .addContainerGap())
        );
        inputFilesPanelLayout.setVerticalGroup(
            inputFilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputFilesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(inputFilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spectrumFilesLabel)
                    .addComponent(spectrumFilesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseSpectrumFilesButton)
                    .addComponent(clearSpectrumFilesButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pepNovoLocationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Executable Folder"));
        pepNovoLocationPanel.setOpaque(false);

        pepNovoLocationLabel.setText("PepNovo Location");

        pepNovoLocationTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pepNovoLocationTextFieldActionPerformed(evt);
            }
        });

        popNovoLocationBrowseButton.setText("Browse");
        popNovoLocationBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popNovoLocationBrowseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pepNovoLocationPanelLayout = new javax.swing.GroupLayout(pepNovoLocationPanel);
        pepNovoLocationPanel.setLayout(pepNovoLocationPanelLayout);
        pepNovoLocationPanelLayout.setHorizontalGroup(
            pepNovoLocationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pepNovoLocationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pepNovoLocationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pepNovoLocationTextField)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(popNovoLocationBrowseButton)
                .addContainerGap())
        );
        pepNovoLocationPanelLayout.setVerticalGroup(
            pepNovoLocationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pepNovoLocationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pepNovoLocationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pepNovoLocationLabel)
                    .addComponent(pepNovoLocationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(popNovoLocationBrowseButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        outputFolderPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Output Folder"));
        outputFolderPanel.setOpaque(false);

        outputFolderLabel.setText("Output Location");

        outputFolderTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputFolderTextFieldActionPerformed(evt);
            }
        });

        outputFolderBrowseButton.setText("Browse");
        outputFolderBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputFolderBrowseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout outputFolderPanelLayout = new javax.swing.GroupLayout(outputFolderPanel);
        outputFolderPanel.setLayout(outputFolderPanelLayout);
        outputFolderPanelLayout.setHorizontalGroup(
            outputFolderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outputFolderPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(outputFolderLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outputFolderTextField)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(outputFolderBrowseButton)
                .addContainerGap())
        );
        outputFolderPanelLayout.setVerticalGroup(
            outputFolderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outputFolderPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(outputFolderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(outputFolderLabel)
                    .addComponent(outputFolderTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(outputFolderBrowseButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        loggingPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Logging"));
        loggingPanel.setOpaque(false);

        javax.swing.GroupLayout loggingPanelLayout = new javax.swing.GroupLayout(loggingPanel);
        loggingPanel.setLayout(loggingPanelLayout);
        loggingPanelLayout.setHorizontalGroup(
            loggingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 642, Short.MAX_VALUE)
        );
        loggingPanelLayout.setVerticalGroup(
            loggingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        searchSettingsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Search Settings"));
        searchSettingsPanel.setOpaque(false);

        enzymeLabel.setText("Enzyme");

        modelComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "CID_IT_TRYP" }));
        modelComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modelComboBoxActionPerformed(evt);
            }
        });

        modelLabel.setText("Model");

        enzymeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "TRYPSIN", "NON_SPECIFIC" }));
        enzymeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enzymeComboBoxActionPerformed(evt);
            }
        });

        fragmentMassToleranceLabel.setText("Fragment Mass Tolerance");

        fragmentMassToleranceSpinner.setModel(new javax.swing.SpinnerNumberModel(0.5d, 0.0d, 2.0d, 0.1d));

        precursorMassToleranceLabel.setText("Precursor Mass Tolerance");

        precursorMassToleranceSpinner.setModel(new javax.swing.SpinnerNumberModel(0.1d, 0.0d, 2.0d, 0.01d));

        numberOfSolutionsLabel.setText("No. Solutions (max. 20)");

        numberOfSolutionsSpinner.setModel(new javax.swing.SpinnerNumberModel(10, 1, 20, 1));

        spectrumChargeCheckBox.setText("Use Spectrum Charge (No Correction)");
        spectrumChargeCheckBox.setIconTextGap(15);
        spectrumChargeCheckBox.setOpaque(false);
        spectrumChargeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spectrumChargeCheckBoxActionPerformed(evt);
            }
        });

        spectrumPrecursorCheckBox.setText("Use Spectrum Precursor m/z (No Correction)");
        spectrumPrecursorCheckBox.setIconTextGap(15);
        spectrumPrecursorCheckBox.setOpaque(false);
        spectrumPrecursorCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spectrumPrecursorCheckBoxActionPerformed(evt);
            }
        });

        filterLowQualityCheckBox.setText("Filter Low Quality Spectra");
        filterLowQualityCheckBox.setIconTextGap(15);
        filterLowQualityCheckBox.setOpaque(false);
        filterLowQualityCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterLowQualityCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout searchSettingsPanelLayout = new javax.swing.GroupLayout(searchSettingsPanel);
        searchSettingsPanel.setLayout(searchSettingsPanelLayout);
        searchSettingsPanelLayout.setHorizontalGroup(
            searchSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchSettingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(searchSettingsPanelLayout.createSequentialGroup()
                        .addComponent(enzymeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(enzymeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(searchSettingsPanelLayout.createSequentialGroup()
                        .addComponent(modelLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(modelComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(searchSettingsPanelLayout.createSequentialGroup()
                        .addGroup(searchSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(filterLowQualityCheckBox)
                            .addComponent(spectrumPrecursorCheckBox)
                            .addComponent(spectrumChargeCheckBox))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchSettingsPanelLayout.createSequentialGroup()
                        .addGroup(searchSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fragmentMassToleranceLabel)
                            .addComponent(precursorMassToleranceLabel)
                            .addComponent(numberOfSolutionsLabel))
                        .addGap(18, 18, 18)
                        .addGroup(searchSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(precursorMassToleranceSpinner)
                            .addComponent(numberOfSolutionsSpinner)
                            .addComponent(fragmentMassToleranceSpinner))))
                .addContainerGap())
        );
        searchSettingsPanelLayout.setVerticalGroup(
            searchSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchSettingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enzymeLabel)
                    .addComponent(enzymeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(searchSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modelComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(modelLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(searchSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fragmentMassToleranceLabel)
                    .addComponent(fragmentMassToleranceSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(searchSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(precursorMassToleranceLabel)
                    .addComponent(precursorMassToleranceSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(searchSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numberOfSolutionsLabel)
                    .addComponent(numberOfSolutionsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(spectrumChargeCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(spectrumPrecursorCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filterLowQualityCheckBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        modificationsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Modifications"));
        modificationsPanel.setOpaque(false);

        modificationsTable.setModel(new ModificationsTableModel());
        modificationsTableScrollPane.setViewportView(modificationsTable);

        configureModificationsButton.setText("Configure");
        configureModificationsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configureModificationsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout modificationsPanelLayout = new javax.swing.GroupLayout(modificationsPanel);
        modificationsPanel.setLayout(modificationsPanelLayout);
        modificationsPanelLayout.setHorizontalGroup(
            modificationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modificationsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(modificationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(modificationsTableScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, modificationsPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(configureModificationsButton)))
                .addContainerGap())
        );
        modificationsPanelLayout.setVerticalGroup(
            modificationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modificationsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(modificationsTableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(configureModificationsButton)
                .addContainerGap())
        );

        deNovoProgressPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("De Novo Search Run"));
        deNovoProgressPanel.setOpaque(false);

        progressLabel.setText("Progress");

        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout deNovoProgressPanelLayout = new javax.swing.GroupLayout(deNovoProgressPanel);
        deNovoProgressPanel.setLayout(deNovoProgressPanelLayout);
        deNovoProgressPanelLayout.setHorizontalGroup(
            deNovoProgressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deNovoProgressPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(progressLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(deNovoProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(startButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancelButton)
                .addContainerGap())
        );

        deNovoProgressPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, startButton});

        deNovoProgressPanelLayout.setVerticalGroup(
            deNovoProgressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deNovoProgressPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(deNovoProgressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(progressLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deNovoProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startButton)
                    .addComponent(cancelButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout deNovoSearchPanelLayout = new javax.swing.GroupLayout(deNovoSearchPanel);
        deNovoSearchPanel.setLayout(deNovoSearchPanelLayout);
        deNovoSearchPanelLayout.setHorizontalGroup(
            deNovoSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deNovoSearchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(deNovoSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(outputFolderPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pepNovoLocationPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(loggingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(inputFilesPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(deNovoSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(modificationsPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchSettingsPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deNovoProgressPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        deNovoSearchPanelLayout.setVerticalGroup(
            deNovoSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deNovoSearchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(deNovoSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(deNovoSearchPanelLayout.createSequentialGroup()
                        .addComponent(searchSettingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(modificationsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deNovoProgressPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(deNovoSearchPanelLayout.createSequentialGroup()
                        .addComponent(inputFilesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pepNovoLocationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(outputFolderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(loggingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 987, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, 0)
                    .addComponent(deNovoSearchPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(0, 0, 0)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 605, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, 0)
                    .addComponent(deNovoSearchPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(0, 0, 0)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void spectrumFilesTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spectrumFilesTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_spectrumFilesTextFieldActionPerformed

    private void browseSpectrumFilesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseSpectrumFilesButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_browseSpectrumFilesButtonActionPerformed

    private void clearSpectrumFilesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearSpectrumFilesButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_clearSpectrumFilesButtonActionPerformed

    private void pepNovoLocationTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pepNovoLocationTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pepNovoLocationTextFieldActionPerformed

    private void popNovoLocationBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popNovoLocationBrowseButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_popNovoLocationBrowseButtonActionPerformed

    private void outputFolderTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputFolderTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_outputFolderTextFieldActionPerformed

    private void outputFolderBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputFolderBrowseButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_outputFolderBrowseButtonActionPerformed

    private void modelComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modelComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_modelComboBoxActionPerformed

    private void enzymeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enzymeComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_enzymeComboBoxActionPerformed

    private void spectrumChargeCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spectrumChargeCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_spectrumChargeCheckBoxActionPerformed

    private void spectrumPrecursorCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spectrumPrecursorCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_spectrumPrecursorCheckBoxActionPerformed

    private void filterLowQualityCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterLowQualityCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_filterLowQualityCheckBoxActionPerformed

    private void configureModificationsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_configureModificationsButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_configureModificationsButtonActionPerformed

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        runCanceled = false;
        deNovoGUI.startSearch();
    }//GEN-LAST:event_startButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        setRunCanceled();
    }//GEN-LAST:event_cancelButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseSpectrumFilesButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton clearSpectrumFilesButton;
    private javax.swing.JButton configureModificationsButton;
    private javax.swing.JProgressBar deNovoProgressBar;
    private javax.swing.JPanel deNovoProgressPanel;
    private javax.swing.JPanel deNovoSearchPanel;
    private javax.swing.JComboBox enzymeComboBox;
    private javax.swing.JLabel enzymeLabel;
    private javax.swing.JCheckBox filterLowQualityCheckBox;
    private javax.swing.JLabel fragmentMassToleranceLabel;
    private javax.swing.JSpinner fragmentMassToleranceSpinner;
    private javax.swing.JPanel inputFilesPanel;
    private javax.swing.JPanel loggingPanel;
    private javax.swing.JComboBox modelComboBox;
    private javax.swing.JLabel modelLabel;
    private javax.swing.JPanel modificationsPanel;
    private javax.swing.JTable modificationsTable;
    private javax.swing.JScrollPane modificationsTableScrollPane;
    private javax.swing.JLabel numberOfSolutionsLabel;
    private javax.swing.JSpinner numberOfSolutionsSpinner;
    private javax.swing.JButton outputFolderBrowseButton;
    private javax.swing.JLabel outputFolderLabel;
    private javax.swing.JPanel outputFolderPanel;
    private javax.swing.JTextField outputFolderTextField;
    private javax.swing.JLabel pepNovoLocationLabel;
    private javax.swing.JPanel pepNovoLocationPanel;
    private javax.swing.JTextField pepNovoLocationTextField;
    private javax.swing.JButton popNovoLocationBrowseButton;
    private javax.swing.JLabel precursorMassToleranceLabel;
    private javax.swing.JSpinner precursorMassToleranceSpinner;
    private javax.swing.JLabel progressLabel;
    private javax.swing.JPanel searchSettingsPanel;
    private javax.swing.JCheckBox spectrumChargeCheckBox;
    private javax.swing.JLabel spectrumFilesLabel;
    private javax.swing.JTextField spectrumFilesTextField;
    private javax.swing.JCheckBox spectrumPrecursorCheckBox;
    private javax.swing.JButton startButton;
    // End of variables declaration//GEN-END:variables

    /**
     * Returns the search parameters as set in the GUI
     *
     * @return the search parameters as set in the GUI
     */
    public SearchParameters getSearchParametersFromGUI() {
        SearchParameters searchParameters = new SearchParameters();

        // @TODO: implement other enzymes
        Enzyme enzyme = null;
        if (enzymeComboBox.getSelectedIndex() == 0) {
            enzyme = enzymeFactory.getEnzyme("Trypsin");
        } else {
            enzyme = enzymeFactory.getEnzyme("No enzyme");
        }
        searchParameters.setEnzyme(enzyme);
        // @TODO: implement other models
        String fragmentationModel = (String) modelComboBox.getSelectedItem();
        searchParameters.setFragmentationModel(fragmentationModel);
        double fragmentIonTolerance = (Double) fragmentMassToleranceSpinner.getValue();
        searchParameters.setFragmentIonAccuracy(fragmentIonTolerance);
        double precursorIonTolerance = (Double) precursorMassToleranceSpinner.getValue();
        searchParameters.setPrecursorAccuracy(precursorIonTolerance);
        //@TODO: what about missed cleavages?
//        int nMissedCleavages = (Integer) missedCleavagesSpinner.getValue();
//        searchParameters.setnMissedCleavages(nMissedCleavages);
        int maxHitListLength = (Integer) numberOfSolutionsSpinner.getValue();
        searchParameters.setHitListLength(maxHitListLength);
        boolean estimateCharge = !spectrumChargeCheckBox.isSelected();
        searchParameters.setEstimateCharge(estimateCharge);
        boolean estimatePrecursorMass = !spectrumPrecursorCheckBox.isSelected();
        searchParameters.correctPrecursorMass(estimatePrecursorMass);
        boolean filterLowQualitySpectra = filterLowQualityCheckBox.isSelected();
        searchParameters.setDiscardLowQualitySpectra(filterLowQualitySpectra);
        ModificationProfile modificationProfile = searchParameters.getModificationProfile();
        for (int row = 0; row < modificationsTable.getRowCount(); row++) {
            if ((Boolean) modificationsTable.getValueAt(row, 0)) {
                String modName = (String) modificationsTable.getValueAt(row, 2);
                PTM ptm = ptmFactory.getPTM(modName);
                modificationProfile.addFixedModification(ptm);
            } else if ((Boolean) modificationsTable.getValueAt(row, 0)) {
                String modName = (String) modificationsTable.getValueAt(row, 2);
                PTM ptm = ptmFactory.getPTM(modName);
                modificationProfile.addVariableModification(ptm);
            }
        }
        return searchParameters;
    }

    @Override
    public void setIndeterminate(boolean indeterminate) {
        deNovoProgressBar.setIndeterminate(indeterminate);
    }

    @Override
    public void setMaxProgressValue(int maxProgressValue) {
        deNovoProgressBar.setMaximum(maxProgressValue);
    }

    @Override
    public void increaseProgressValue() {
        increaseProgressValue(1);
    }

    @Override
    public void increaseProgressValue(int increment) {
        deNovoProgressBar.setValue(deNovoProgressBar.getValue() + increment);
    }

    @Override
    public void setMaxSecondaryProgressValue(int maxProgressValue) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void resetSecondaryProgressBar() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void increaseSecondaryProgressValue() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setSecondaryProgressValue(int value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void increaseSecondaryProgressValue(int amount) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setSecondaryProgressDialogIndeterminate(boolean indeterminate) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setRunFinished() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setRunCanceled() {
        runCanceled = true;
    }

    @Override
    public void appendReport(String report, boolean includeDate, boolean addNewLine) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void appendReportNewLineNoDate() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void appendReportEndLine() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public boolean isRunCanceled() {
        return runCanceled;
    }

    @Override
    public boolean isRunFinished() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public JProgressBar getSecondaryProgressBar() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public JProgressBar getPrimaryProgressBar() {
        return deNovoProgressBar;
    }

    @Override
    public void displayMessage(String message, String title, int messageType) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void displayHtmlMessage(JEditorPane messagePane, String title, int messageType) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setWaitingText(String text) {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    

    /**
     * Table model for the modifications table.
     */
    private class ModificationsTableModel extends DefaultTableModel {

        /**
         * List of all modifications
         */
        private ArrayList<String> modifications = null;
        /**
         * Map of the fixed modifications
         */
        private HashMap<String, Boolean> fixedModifications;
        /**
         * Map of the variable modifications
         */
        private HashMap<String, Boolean> variableModifications;

        /**
         * Constructor
         */
        public ModificationsTableModel() {
            modifications = ptmFactory.getPTMs();
            Collections.sort(modifications);
            fixedModifications = new HashMap<String, Boolean>();
            variableModifications = new HashMap<String, Boolean>();
            for (String modificationName : modifications) {
                fixedModifications.put(modificationName, false);
                variableModifications.put(modificationName, false);
            }
        }

        @Override
        public int getRowCount() {
            if (modifications == null) {
                return 0;
            }
            return modifications.size();
        }

        @Override
        public int getColumnCount() {
            return 3;
        }

        @Override
        public String getColumnName(int column) {
            switch (column) {
                case 0:
                    return "Fixed";
                case 1:
                    return "Variable";
                case 2:
                    return " ";
                default:
                    return "";
            }
        }

        @Override
        public Object getValueAt(int row, int column) {
            String modificationName = modifications.get(row);
            switch (column) {
                case 0:
                    return fixedModifications.get(modificationName);
                case 1:
                    return variableModifications.get(modificationName);
                case 2:
                    return modificationName;
                default:
                    return "";
            }
        }

        @Override
        public Class getColumnClass(int columnIndex) {
            for (int i = 0; i < getRowCount(); i++) {
                if (getValueAt(i, columnIndex) != null) {
                    return getValueAt(i, columnIndex).getClass();
                }
            }
            return String.class;
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return columnIndex == 0 || columnIndex == 1;
        }

        @Override
        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
            if (columnIndex == 0) {
                String modificationName = modifications.get(rowIndex);
                Boolean value = (Boolean) aValue;
                fixedModifications.put(modificationName, value);
                if (value) {
                    variableModifications.put(modificationName, false);
                }
            } else if (columnIndex == 0) {
                String modificationName = modifications.get(rowIndex);
                Boolean value = (Boolean) aValue;
                variableModifications.put(modificationName, value);
                if (value) {
                    fixedModifications.put(modificationName, false);
                }
            }
        }
    }
}
