package com.compomics.denovogui.gui;

import com.compomics.util.experiment.biology.Enzyme;
import com.compomics.util.experiment.biology.EnzymeFactory;
import com.compomics.util.experiment.biology.PTM;
import com.compomics.util.experiment.biology.PTMFactory;
import com.compomics.util.experiment.identification.SearchParameters;
import com.compomics.util.preferences.ModificationProfile;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.DefaultTableModel;
import no.uib.jsparklines.extra.NimbusCheckBoxRenderer;

/**
 * Dialog for displaying the search settings.
 *
 * @author Harald Barsnes
 */
public class SettingsDialog extends javax.swing.JDialog {

    /**
     * A references to the main DeNovoGUI.
     */
    private DeNovoGUI deNovoGUI;
    /**
     * The factory used to handle the modifications.
     */
    private PTMFactory ptmFactory = PTMFactory.getInstance();
    /**
     * The compomics enzyme factory.
     */
    private EnzymeFactory enzymeFactory = EnzymeFactory.getInstance();
    /**
     * The search parameters.
     */
    private SearchParameters searchParameters;
    /**
     * The parameter file.
     */
    private File parametersFile = null;

    /**
     * Creates a new SettingsDialog.
     *
     * @param deNovoGUI references to the main DeNovoGUI
     * @param searchParameters
     * @param setVisible
     * @param modal
     */
    public SettingsDialog(DeNovoGUI deNovoGUI, SearchParameters searchParameters, boolean setVisible, boolean modal) {
        super(deNovoGUI, modal);
        this.deNovoGUI = deNovoGUI;
        this.searchParameters = searchParameters;
        initComponents();
        setUpGUI();
        insertData();
        setLocationRelativeTo(deNovoGUI);

        if (setVisible) {
            SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    setVisible(true);
                }
            });
        }
    }

    /**
     * Set up the GUI.
     */
    private void setUpGUI() {

        modificationsTable.getColumn("Fixed").setMinWidth(70);
        modificationsTable.getColumn("Fixed").setMaxWidth(70);
        modificationsTable.getColumn("Variable").setMinWidth(70);
        modificationsTable.getColumn("Variable").setMaxWidth(70);

        modificationsTable.getColumn("Fixed").setCellRenderer(new NimbusCheckBoxRenderer());
        modificationsTable.getColumn("Variable").setCellRenderer(new NimbusCheckBoxRenderer());

        // make sure that the scroll panes are see-through
        modificationsTableScrollPane.getViewport().setOpaque(false);

        modificationsTable.getTableHeader().setReorderingAllowed(false);
    }

    /**
     * Insert the search parameters into the GUI.
     */
    private void insertData() {

        if (searchParameters.getParametersFile() != null) {
            settingsFileJTextField.setText(searchParameters.getParametersFile().getAbsolutePath());
            parametersFile = searchParameters.getParametersFile();
        }

        if (searchParameters.getEnzyme().getName().equalsIgnoreCase("Trypsin")) {
            enzymeComboBox.setSelectedItem("TRYPSIN");
        } else if (searchParameters.getEnzyme().getName().equalsIgnoreCase("No enzyme")) {
            enzymeComboBox.setSelectedItem("NON_SPECIFIC");
        } else {
            // enzyme not supported...
            // @TODO: support more enzymes??
        }

        modelComboBox.setSelectedItem("CID_IT_TRYP"); // @TODO: support other models??

        fragmentMassToleranceSpinner.setValue(searchParameters.getFragmentIonAccuracy());
        precursorMassToleranceSpinner.setValue(searchParameters.getPrecursorAccuracy()); // @TODO: type? Da or ppm?

        numberOfSolutionsSpinner.setValue(searchParameters.getHitListLength());

        spectrumChargeCheckBox.setSelected(!searchParameters.isEstimateCharge());
        spectrumPrecursorCheckBox.setSelected(!searchParameters.isCorrectPrecursorMass());
        filterLowQualityCheckBox.setSelected(searchParameters.getDiscardLowQualitySpectra());

        // @TODO: insert the modifiction settings
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backgroundPanel = new javax.swing.JPanel();
        searchSettingsPanel = new javax.swing.JPanel();
        enzymeLabel = new javax.swing.JLabel();
        modelComboBox = new javax.swing.JComboBox();
        modelLabel = new javax.swing.JLabel();
        enzymeComboBox = new javax.swing.JComboBox();
        fragmentMassToleranceLabel = new javax.swing.JLabel();
        fragmentMassToleranceSpinner = new javax.swing.JSpinner();
        precursorMassToleranceLabel = new javax.swing.JLabel();
        precursorMassToleranceSpinner = new javax.swing.JSpinner();
        numberOfSolutionsLabel = new javax.swing.JLabel();
        numberOfSolutionsSpinner = new javax.swing.JSpinner();
        spectrumChargeCheckBox = new javax.swing.JCheckBox();
        spectrumPrecursorCheckBox = new javax.swing.JCheckBox();
        filterLowQualityCheckBox = new javax.swing.JCheckBox();
        modificationsPanel = new javax.swing.JPanel();
        modificationsTableScrollPane = new javax.swing.JScrollPane();
        modificationsTable = new javax.swing.JTable();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        configurationFilePanelSettings = new javax.swing.JPanel();
        configurationFileLbl2 = new javax.swing.JLabel();
        browseConfigurationButton2 = new javax.swing.JButton();
        settingsFileJTextField = new javax.swing.JTextField();
        saveConfiguration = new javax.swing.JButton();
        saveConfigurationAs = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Search Settings");

        backgroundPanel.setBackground(new java.awt.Color(230, 230, 230));

        searchSettingsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Search Settings"));
        searchSettingsPanel.setOpaque(false);

        enzymeLabel.setText("Enzyme");

        modelComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "CID_IT_TRYP" }));

        modelLabel.setText("Model");

        enzymeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "TRYPSIN", "NON_SPECIFIC" }));

        fragmentMassToleranceLabel.setText("Fragment Mass Tolerance");

        fragmentMassToleranceSpinner.setModel(new javax.swing.SpinnerNumberModel(0.5d, 0.0d, 2.0d, 0.1d));

        precursorMassToleranceLabel.setText("Precursor Mass Tolerance");

        precursorMassToleranceSpinner.setModel(new javax.swing.SpinnerNumberModel(1.0d, 0.0d, 2.0d, 0.01d));

        numberOfSolutionsLabel.setText("No. Solutions (max. 20)");

        numberOfSolutionsSpinner.setModel(new javax.swing.SpinnerNumberModel(10, 1, 20, 1));

        spectrumChargeCheckBox.setText("Use Spectrum Charge (No Correction)");
        spectrumChargeCheckBox.setIconTextGap(15);
        spectrumChargeCheckBox.setOpaque(false);

        spectrumPrecursorCheckBox.setText("Use Spectrum Precursor m/z (No Correction)");
        spectrumPrecursorCheckBox.setIconTextGap(15);
        spectrumPrecursorCheckBox.setOpaque(false);

        filterLowQualityCheckBox.setText("Filter Low Quality Spectra");
        filterLowQualityCheckBox.setIconTextGap(15);
        filterLowQualityCheckBox.setOpaque(false);

        javax.swing.GroupLayout searchSettingsPanelLayout = new javax.swing.GroupLayout(searchSettingsPanel);
        searchSettingsPanel.setLayout(searchSettingsPanelLayout);
        searchSettingsPanelLayout.setHorizontalGroup(
            searchSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchSettingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(searchSettingsPanelLayout.createSequentialGroup()
                        .addComponent(enzymeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(enzymeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(searchSettingsPanelLayout.createSequentialGroup()
                        .addComponent(modelLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(modelComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(searchSettingsPanelLayout.createSequentialGroup()
                        .addGroup(searchSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(filterLowQualityCheckBox)
                            .addComponent(spectrumPrecursorCheckBox)
                            .addComponent(spectrumChargeCheckBox))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchSettingsPanelLayout.createSequentialGroup()
                        .addGroup(searchSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(searchSettingsPanelLayout.createSequentialGroup()
                                .addComponent(numberOfSolutionsLabel)
                                .addGap(52, 52, 52))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, searchSettingsPanelLayout.createSequentialGroup()
                                .addGroup(searchSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(precursorMassToleranceLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(fragmentMassToleranceLabel, javax.swing.GroupLayout.Alignment.LEADING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(searchSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(precursorMassToleranceSpinner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fragmentMassToleranceSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(numberOfSolutionsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        searchSettingsPanelLayout.setVerticalGroup(
            searchSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchSettingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enzymeLabel)
                    .addComponent(enzymeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(searchSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modelComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(modelLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(searchSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fragmentMassToleranceLabel)
                    .addComponent(fragmentMassToleranceSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(searchSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(precursorMassToleranceSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(precursorMassToleranceLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(searchSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numberOfSolutionsLabel)
                    .addComponent(numberOfSolutionsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(spectrumChargeCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spectrumPrecursorCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filterLowQualityCheckBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        modificationsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Modifications"));
        modificationsPanel.setOpaque(false);

        modificationsTable.setModel(new ModificationsTableModel());
        modificationsTableScrollPane.setViewportView(modificationsTable);

        javax.swing.GroupLayout modificationsPanelLayout = new javax.swing.GroupLayout(modificationsPanel);
        modificationsPanel.setLayout(modificationsPanelLayout);
        modificationsPanelLayout.setHorizontalGroup(
            modificationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modificationsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(modificationsTableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 472, Short.MAX_VALUE)
                .addContainerGap())
        );
        modificationsPanelLayout.setVerticalGroup(
            modificationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modificationsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(modificationsTableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        configurationFilePanelSettings.setBorder(javax.swing.BorderFactory.createTitledBorder("Settings"));
        configurationFilePanelSettings.setOpaque(false);

        configurationFileLbl2.setText("Settings File");

        browseConfigurationButton2.setText("Load");
        browseConfigurationButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseConfigurationButton2ActionPerformed(evt);
            }
        });

        settingsFileJTextField.setEditable(false);

        saveConfiguration.setText("Save");
        saveConfiguration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveConfigurationActionPerformed(evt);
            }
        });

        saveConfigurationAs.setText("Save As");
        saveConfigurationAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveConfigurationAsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout configurationFilePanelSettingsLayout = new javax.swing.GroupLayout(configurationFilePanelSettings);
        configurationFilePanelSettings.setLayout(configurationFilePanelSettingsLayout);
        configurationFilePanelSettingsLayout.setHorizontalGroup(
            configurationFilePanelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, configurationFilePanelSettingsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(configurationFileLbl2, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(settingsFileJTextField)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(browseConfigurationButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveConfiguration)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveConfigurationAs, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        configurationFilePanelSettingsLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {browseConfigurationButton2, saveConfiguration, saveConfigurationAs});

        configurationFilePanelSettingsLayout.setVerticalGroup(
            configurationFilePanelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configurationFilePanelSettingsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(configurationFilePanelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(configurationFileLbl2)
                    .addComponent(settingsFileJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveConfigurationAs)
                    .addComponent(saveConfiguration)
                    .addComponent(browseConfigurationButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout backgroundPanelLayout = new javax.swing.GroupLayout(backgroundPanel);
        backgroundPanel.setLayout(backgroundPanelLayout);
        backgroundPanelLayout.setHorizontalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(backgroundPanelLayout.createSequentialGroup()
                        .addComponent(searchSettingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(modificationsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, backgroundPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(okButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton))
                    .addComponent(configurationFilePanelSettings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        backgroundPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, okButton});

        backgroundPanelLayout.setVerticalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(configurationFilePanelSettings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(modificationsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchSettingsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(okButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Save the settings an close the dialog.
     *
     * @param evt
     */
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed

        SearchParameters tempSearchParameters = getSearchParametersFromGUI();

        if (settingsFileJTextField.getText().length() == 0) {
            tempSearchParameters.setParametersFile(null);
            deNovoGUI.setSearchParameters(tempSearchParameters);
            dispose();
        } else {
            if (!deNovoGUI.getSearchParameters().equals(tempSearchParameters)) {

                int value = JOptionPane.showConfirmDialog(this, "The search parameters have been changed."
                        + "\nDo you want to save the changes?", "Save Changes?", JOptionPane.YES_NO_CANCEL_OPTION);

                if (value == JOptionPane.YES_OPTION) {
                    try {
                        tempSearchParameters.setParametersFile(deNovoGUI.getSearchParameters().getParametersFile());
                        SearchParameters.saveIdentificationParameters(tempSearchParameters, deNovoGUI.getSearchParameters().getParametersFile());
                        deNovoGUI.setSearchParameters(tempSearchParameters);
                        dispose();
                    } catch (ClassNotFoundException e) {
                        JOptionPane.showMessageDialog(this, "An error occurred when saving the search parameter:\n"
                                + e.getMessage(), "File Error", JOptionPane.ERROR_MESSAGE);
                        e.printStackTrace();
                    } catch (IOException e) {
                        JOptionPane.showMessageDialog(this, "An error occurred when saving the search parameter:\n"
                                + e.getMessage(), "File Error", JOptionPane.ERROR_MESSAGE);
                        e.printStackTrace();
                    }
                } else if (value == JOptionPane.NO_OPTION) {
                    dispose(); // reject the changes
                }
            } else {
                dispose(); // no changes
            }
        }

    }//GEN-LAST:event_okButtonActionPerformed

    /**
     * Close the dialog without saving.
     *
     * @param evt
     */
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * Load search parameters from file.
     *
     * @param evt
     */
    private void browseConfigurationButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseConfigurationButton2ActionPerformed
        // First check whether a file has already been selected.
        // If so, start from that file's parent.
        File startLocation = new File(deNovoGUI.getLastSelectedFolder());
        if (settingsFileJTextField.getText() != null && new File(settingsFileJTextField.getText()).exists()) {
            File temp = new File(settingsFileJTextField.getText());
            startLocation = temp.getParentFile();
        }
        JFileChooser fc = new JFileChooser(startLocation);

        FileFilter filter = new FileFilter() {
            @Override
            public boolean accept(File myFile) {

                return myFile.getName().toLowerCase().endsWith(".properties")
                        || myFile.getName().toLowerCase().endsWith(".parameters")
                        || myFile.isDirectory();
            }

            @Override
            public String getDescription() {
                return "DeNovoGUI search parameters";
            }
        };
        fc.setFileFilter(filter);
        int result = fc.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            deNovoGUI.setLastSelectedFolder(file.getAbsolutePath());
            try {
                searchParameters = SearchParameters.getIdentificationParameters(file);
                deNovoGUI.loadModifications(searchParameters);
                insertData();
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Error occured while reading " + file + ". Please verify the search paramters.", "File Error", JOptionPane.ERROR_MESSAGE);
            }
            parametersFile = file;
            settingsFileJTextField.setText(parametersFile.getAbsolutePath());
            searchParameters = getSearchParametersFromGUI();
            searchParameters.setParametersFile(parametersFile);
            deNovoGUI.setSearchParameters(searchParameters);
            validateParametersInput(true);
        }
    }//GEN-LAST:event_browseConfigurationButton2ActionPerformed

    /**
     * Save the search parameters.
     *
     * @param evt
     */
    private void saveConfigurationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveConfigurationActionPerformed
        savePressed();
    }//GEN-LAST:event_saveConfigurationActionPerformed

    /**
     * Save the search parameters.
     *
     * @param evt
     */
    private void saveConfigurationAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveConfigurationAsActionPerformed
        saveAsPressed();
    }//GEN-LAST:event_saveConfigurationAsActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel backgroundPanel;
    private javax.swing.JButton browseConfigurationButton2;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel configurationFileLbl2;
    private javax.swing.JPanel configurationFilePanelSettings;
    private javax.swing.JComboBox enzymeComboBox;
    private javax.swing.JLabel enzymeLabel;
    private javax.swing.JCheckBox filterLowQualityCheckBox;
    private javax.swing.JLabel fragmentMassToleranceLabel;
    private javax.swing.JSpinner fragmentMassToleranceSpinner;
    private javax.swing.JComboBox modelComboBox;
    private javax.swing.JLabel modelLabel;
    private javax.swing.JPanel modificationsPanel;
    private javax.swing.JTable modificationsTable;
    private javax.swing.JScrollPane modificationsTableScrollPane;
    private javax.swing.JLabel numberOfSolutionsLabel;
    private javax.swing.JSpinner numberOfSolutionsSpinner;
    private javax.swing.JButton okButton;
    private javax.swing.JLabel precursorMassToleranceLabel;
    private javax.swing.JSpinner precursorMassToleranceSpinner;
    private javax.swing.JButton saveConfiguration;
    private javax.swing.JButton saveConfigurationAs;
    private javax.swing.JPanel searchSettingsPanel;
    private javax.swing.JTextField settingsFileJTextField;
    private javax.swing.JCheckBox spectrumChargeCheckBox;
    private javax.swing.JCheckBox spectrumPrecursorCheckBox;
    // End of variables declaration//GEN-END:variables

    /**
     * Table model for the modifications table.
     */
    private class ModificationsTableModel extends DefaultTableModel {

        /**
         * List of all modifications
         */
        private ArrayList<String> modifications = null;
        /**
         * Map of the fixed modifications
         */
        private HashMap<String, Boolean> fixedModifications;
        /**
         * Map of the variable modifications
         */
        private HashMap<String, Boolean> variableModifications;

        /**
         * Constructor
         */
        public ModificationsTableModel() {
            modifications = ptmFactory.getPTMs();
            Collections.sort(modifications);
            fixedModifications = new HashMap<String, Boolean>();
            variableModifications = new HashMap<String, Boolean>();
            for (String modificationName : modifications) {
                fixedModifications.put(modificationName, false);
                variableModifications.put(modificationName, false);
            }
        }

        @Override
        public int getRowCount() {
            if (modifications == null) {
                return 0;
            }
            return modifications.size();
        }

        @Override
        public int getColumnCount() {
            return 3;
        }

        @Override
        public String getColumnName(int column) {
            switch (column) {
                case 0:
                    return " ";
                case 1:
                    return "Fixed";
                case 2:
                    return "Variable";
                default:
                    return "";
            }
        }

        @Override
        public Object getValueAt(int row, int column) {
            String modificationName = modifications.get(row);
            switch (column) {
                case 0:
                    return modificationName;
                case 1:
                    return fixedModifications.get(modificationName);
                case 2:
                    return variableModifications.get(modificationName);
                default:
                    return "";
            }
        }

        @Override
        public Class getColumnClass(int columnIndex) {
            for (int i = 0; i < getRowCount(); i++) {
                if (getValueAt(i, columnIndex) != null) {
                    return getValueAt(i, columnIndex).getClass();
                }
            }
            return String.class;
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return columnIndex == 1 || columnIndex == 2;
        }

        @Override
        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
            if (columnIndex == 1) {
                String modificationName = modifications.get(rowIndex);
                Boolean value = (Boolean) aValue;
                fixedModifications.put(modificationName, value);
                if (value) {
                    variableModifications.put(modificationName, false);
                }
            } else if (columnIndex == 2) {
                String modificationName = modifications.get(rowIndex);
                Boolean value = (Boolean) aValue;
                variableModifications.put(modificationName, value);
                if (value) {
                    fixedModifications.put(modificationName, false);
                }
            }
        }
    }

    /**
     * Returns the search parameters as set in the GUI.
     *
     * @return the search parameters as set in the GUI
     */
    public SearchParameters getSearchParametersFromGUI() {

        SearchParameters tempSearchParameters = new SearchParameters();

        // @TODO: implement other enzymes
        Enzyme enzyme;
        if (enzymeComboBox.getSelectedIndex() == 0) {
            enzyme = enzymeFactory.getEnzyme("Trypsin");
        } else {
            enzyme = enzymeFactory.getEnzyme("No enzyme");
        }
        tempSearchParameters.setEnzyme(enzyme);

        // @TODO: implement other models
        String fragmentationModel = (String) modelComboBox.getSelectedItem();
        tempSearchParameters.setFragmentationModel(fragmentationModel);
        double fragmentIonTolerance = (Double) fragmentMassToleranceSpinner.getValue();
        tempSearchParameters.setFragmentIonAccuracy(fragmentIonTolerance);
        double precursorIonTolerance = (Double) precursorMassToleranceSpinner.getValue();
        tempSearchParameters.setPrecursorAccuracy(precursorIonTolerance);
        int maxHitListLength = (Integer) numberOfSolutionsSpinner.getValue();
        tempSearchParameters.setHitListLength(maxHitListLength);
        boolean estimateCharge = !spectrumChargeCheckBox.isSelected();
        tempSearchParameters.setEstimateCharge(estimateCharge);
        boolean estimatePrecursorMass = !spectrumPrecursorCheckBox.isSelected();
        tempSearchParameters.correctPrecursorMass(estimatePrecursorMass);
        boolean filterLowQualitySpectra = filterLowQualityCheckBox.isSelected();
        tempSearchParameters.setDiscardLowQualitySpectra(filterLowQualitySpectra);

        ModificationProfile modificationProfile = tempSearchParameters.getModificationProfile();
        for (int row = 0; row < modificationsTable.getRowCount(); row++) {
            if ((Boolean) modificationsTable.getValueAt(row, 1)) {
                String modName = (String) modificationsTable.getValueAt(row, 0);
                PTM ptm = ptmFactory.getPTM(modName);
                modificationProfile.addFixedModification(ptm);
            } else if ((Boolean) modificationsTable.getValueAt(row, 2)) {
                String modName = (String) modificationsTable.getValueAt(row, 0);
                PTM ptm = ptmFactory.getPTM(modName);
                modificationProfile.addVariableModification(ptm);
            }
        }
        return tempSearchParameters;
    }

    /**
     * Inspects the parameters validity.
     *
     * @param showMessage if true an error messages are shown to the users
     * @return a boolean indicating if the parameters are valid
     */
    public boolean validateParametersInput(boolean showMessage) {

        boolean valid = true;

        // @TODO: do we need any sort of validation here??

        okButton.setEnabled(valid);

        return valid;
    }

    /**
     * This method is called when the user clicks the 'Save' button.
     */
    public void savePressed() {
        if (parametersFile == null) {
            saveAsPressed();
        } else if (validateParametersInput(true)) {
            try {
                searchParameters = getSearchParametersFromGUI();
                SearchParameters.saveIdentificationParameters(searchParameters, parametersFile);
                deNovoGUI.setSearchParameters(searchParameters);
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, new String[]{"An error occurred while witing: " + parametersFile.getName(), e.getMessage()}, "Error Saving File", JOptionPane.WARNING_MESSAGE);
            }
        }
    }

    /**
     * This method is called when the user clicks the 'Save As' button.
     */
    public void saveAsPressed() {

        if (validateParametersInput(true)) {

            // First check whether a file has already been selected.
            // If so, start from that file's parent.
            File startLocation = new File(deNovoGUI.getLastSelectedFolder());

            if (settingsFileJTextField.getText() != null && !settingsFileJTextField.getText().trim().equals("")) {
                File temp = new File(settingsFileJTextField.getText());
                startLocation = temp.getParentFile();
            }

            boolean complete = false;

            while (!complete) {
                JFileChooser fc = new JFileChooser(startLocation);
                FileFilter filter = new FileFilter() {
                    @Override
                    public boolean accept(File myFile) {

                        return myFile.getName().toLowerCase().endsWith(".parameters")
                                || myFile.isDirectory();
                    }

                    @Override
                    public String getDescription() {
                        return "DeNovoGUI search parameters";
                    }
                };
                fc.setFileFilter(filter);
                int result = fc.showSaveDialog(this);

                if (result == JFileChooser.APPROVE_OPTION) {
                    File selected = fc.getSelectedFile();
                    deNovoGUI.setLastSelectedFolder(selected.getAbsolutePath());
                    // Make sure the file is appended with '.parameters'
                    if (!selected.getName().toLowerCase().endsWith(".parameters")) {
                        selected = new File(selected.getParentFile(), selected.getName() + ".parameters");
                        parametersFile = selected;
                    } else {
                        selected = new File(selected.getParentFile(), selected.getName());
                        parametersFile = selected;
                    }
                    complete = true;
                    if (selected.exists()) {
                        int choice = JOptionPane.showConfirmDialog(this,
                                new String[]{"The file " + selected.getName() + " already exists.", "Overwrite?"},
                                "File Already Exists", JOptionPane.YES_NO_OPTION);
                        if (choice == JOptionPane.NO_OPTION) {
                            complete = false;
                        }
                    }
                } else {
                    return;
                }
            }

            savePressed();
            settingsFileJTextField.setText(parametersFile.getPath());
            searchParameters.setParametersFile(parametersFile);
        }
    }
}
