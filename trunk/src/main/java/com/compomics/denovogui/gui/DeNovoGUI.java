package com.compomics.denovogui.gui;

import com.compomics.denovogui.DenovoSearchHandler;
import com.compomics.denovogui.DenovoguiWrapper;
import com.compomics.denovogui.gui.tablemodels.SpectrumMatchTableModel;
import com.compomics.denovogui.gui.tablemodels.SpectrumTableModel;
import com.compomics.util.db.ObjectsCache;
import com.compomics.util.denovo.PeptideAssumptionDetails;
import com.compomics.util.experiment.MsExperiment;
import com.compomics.util.experiment.ProteomicAnalysis;
import com.compomics.util.experiment.SampleAnalysisSet;
import com.compomics.util.experiment.biology.Enzyme;
import com.compomics.util.experiment.biology.EnzymeFactory;
import com.compomics.util.experiment.biology.PTM;
import com.compomics.util.experiment.biology.PTMFactory;
import com.compomics.util.experiment.biology.Sample;
import com.compomics.util.experiment.identification.Identification;
import com.compomics.util.experiment.identification.IdentificationMethod;
import com.compomics.util.experiment.identification.PeptideAssumption;
import com.compomics.util.experiment.identification.SearchParameters;
import com.compomics.util.experiment.identification.SequenceFactory;
import com.compomics.util.experiment.identification.identifications.Ms2Identification;
import com.compomics.util.experiment.io.identifications.idfilereaders.PepNovoIdfileReader;
import com.compomics.util.experiment.massspectrometry.SpectrumFactory;
import com.compomics.util.preferences.ModificationProfile;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Thilo Muth
 * @author Harald Barsnes
 */
public class DeNovoGUI extends javax.swing.JFrame {

    /**
     * Modification file.
     */
    private final static String MODIFICATION_FILE = "resources/conf/denovogui_mods.xml";
    /**
     * User modification file.
     */
    private final static String USER_MODIFICATION_FILE = "resources/conf/denovogui_usermods.xml";
    /**
     * The enzyme file
     */
    private final static String ENZYME_FILE = "resources/conf/enzymes.xml";
    
    /**
     * The compomics enzyme factory.
     */
    private EnzymeFactory enzymeFactory = EnzymeFactory.getInstance();
    
    /**
     * The spectrum factory.
     */
    private SpectrumFactory spectrumFactory = SpectrumFactory.getInstance(1000);
    /**
     * The factory used to handle the modifications.
     */
    private PTMFactory ptmFactory = PTMFactory.getInstance();
    /**
     * The location of the folder used for caching.
     */
    public final static String CACHE_DIRECTORY = "resources/cache";
    /**
     * De novo identification
     */
    private Identification identification;
    /**
     * The search handler
     */
    private DenovoSearchHandler searchHandler;
    /**
     * The search parameters
     */
    private SearchParameters searchParameters = null;

    /**
     * Creates new form DeNovoGUI
     */
    public DeNovoGUI() {
        initComponents();
        // Load modifications
        try {
            ptmFactory.importModifications(getModificationsFile(), false);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error while reading " + MODIFICATION_FILE + ".", "Modification File Error", JOptionPane.ERROR_MESSAGE);
        }
        try {
            ptmFactory.importModifications(getUserModificationsFile(), true);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error while reading " + USER_MODIFICATION_FILE + ".", "Modification File Error", JOptionPane.ERROR_MESSAGE);
        }

        // Load the enzymes
        try {
            enzymeFactory.importEnzymes(new File(ENZYME_FILE));
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error while reading " + ENZYME_FILE + ".", "Enzyme File Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        inputPane = new javax.swing.JTabbedPane();
        inputPnl1 = new com.compomics.denovogui.gui.panels.InputPnl();
        resultPnl1 = new com.compomics.denovogui.gui.panels.ResultPnl();
        statisticsPnl1 = new com.compomics.denovogui.gui.panels.StatisticsPnl();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DeNovoGUI");

        inputPane.addTab("De Novo Search", inputPnl1);
        inputPane.addTab("De Novo Results", resultPnl1);
        inputPane.addTab("Statistics", statisticsPnl1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(inputPane)
                .addGap(23, 23, 23))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(inputPane)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DeNovoGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DeNovoGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DeNovoGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DeNovoGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DeNovoGUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane inputPane;
    private com.compomics.denovogui.gui.panels.InputPnl inputPnl1;
    private com.compomics.denovogui.gui.panels.ResultPnl resultPnl1;
    private com.compomics.denovogui.gui.panels.StatisticsPnl statisticsPnl1;
    // End of variables declaration//GEN-END:variables

    /**
     * Returns the modifications file.
     *
     * @return the modifications file
     */
    public File getModificationsFile() {
        File result = new File(getJarFilePath() + File.separator + MODIFICATION_FILE);

        if (!result.exists()) {
            JOptionPane.showMessageDialog(null, MODIFICATION_FILE + " not found.", "Modification File Error", JOptionPane.ERROR_MESSAGE);
        }
        return result;
    }

    /**
     * Starts the search
     */
    private void startSearch() {
        searchParameters = inputPnl1.getSearchParametersFromGUI();
        searchHandler = new DenovoSearchHandler(null);
        searchHandler.startSearch(null, searchParameters, null);
    }
    
    /**
     * Returns the user defined modifications file.
     *
     * @return the user defined modifications file
     */
    public File getUserModificationsFile() {
        File result = new File(getJarFilePath() + File.separator + USER_MODIFICATION_FILE);
        if (!result.exists()) {
            JOptionPane.showMessageDialog(null, USER_MODIFICATION_FILE + " not found.", "Modification File Error", JOptionPane.ERROR_MESSAGE);
        }
        return result;
    }

    /**
     * Loads the mgf files in the spectrum factory
     *
     * @param mgfFiles loads the mgf files in the spectrum factory
     * @throws FileNotFoundException
     * @throws IOException
     * @throws ClassNotFoundException
     */
    private void loadSpectra(ArrayList<File> mgfFiles) throws FileNotFoundException, IOException, ClassNotFoundException {
        // Add spectrum files to the spectrum factory
        for (File spectrumFile : mgfFiles) {
            //@TODO: add progress bar
            spectrumFactory.addSpectra(spectrumFile);
        }
    }

    /**
     * Imports the pepnovo results from the given files and puts all matches in
     * the identification
     *
     * @param outFiles the pepnovo result files as a list
     */
    private void importPepnovoResults(ArrayList<String> outFiles) throws SQLException, FileNotFoundException, IOException, IllegalArgumentException, ClassNotFoundException, Exception {
        //@TODO: let the user reference his project
        String projectReference = "project reference";
        String sampleReference = "sample reference";
        int replicateNumber = 0;
        String identificationReference = Identification.getDefaultReference(projectReference, sampleReference, replicateNumber);
        MsExperiment experiment = new MsExperiment(projectReference);
        Sample sample = new Sample(sampleReference);
        SampleAnalysisSet analysisSet = new SampleAnalysisSet(sample, new ProteomicAnalysis(replicateNumber));
        experiment.addAnalysisSet(sample, analysisSet);
        ProteomicAnalysis analysis = experiment.getAnalysisSet(sample).getProteomicAnalysis(replicateNumber);
        analysis.addIdentificationResults(IdentificationMethod.MS2_IDENTIFICATION, new Ms2Identification(identificationReference));
        // The identification object
        identification = analysis.getIdentification(IdentificationMethod.MS2_IDENTIFICATION);
        identification.setIsDB(true);
        // The cache used whenever the identification becomes too big
        String dbFolder = new File(getJarFilePath(), CACHE_DIRECTORY).getAbsolutePath();
        ObjectsCache objectsCache = new ObjectsCache();
        objectsCache.setAutomatedMemoryManagement(true);
        identification.establishConnection(dbFolder, true, objectsCache);

        for (String fileAsString : outFiles) {
            // initiate the parser
            File file = new File(fileAsString);
            PepNovoIdfileReader idfileReader = new PepNovoIdfileReader(file);
            // put the identification results in the identification object
            identification.addSpectrumMatch(idfileReader.getAllSpectrumMatches(null));
        }
    }

    /**
     * Returns the path to the jar file.
     *
     * @return the path to the jar file
     */
    protected String getJarFilePath() {
        return DenovoguiWrapper.getJarFilePath(this.getClass().getResource("DeNovoGUI.class").getPath(), DenovoguiWrapper.toolName);
    }

    /**
     * Table model for the modifications table
     */
    private class ModificationsTableModel extends DefaultTableModel {

        /**
         * List of all modifications
         */
        private ArrayList<String> modifications = null;
        /**
         * Map of the fixed modifications
         */
        private HashMap<String, Boolean> fixedModifications;
        /**
         * Map of the variable modifications
         */
        private HashMap<String, Boolean> variableModifications;

        /**
         * Constructor
         */
        public ModificationsTableModel() {
            modifications = ptmFactory.getPTMs();
            Collections.sort(modifications);
            fixedModifications = new HashMap<String, Boolean>();
            variableModifications = new HashMap<String, Boolean>();
            for (String modificationName : modifications) {
                fixedModifications.put(modificationName, false);
                variableModifications.put(modificationName, false);
            }
        }

        @Override
        public int getRowCount() {
            if (modifications == null) {
                return 0;
            }
            return modifications.size();
        }

        @Override
        public int getColumnCount() {
            return 3;
        }

        @Override
        public String getColumnName(int column) {
            switch (column) {
                case 0:
                    return "Fixed";
                case 1:
                    return "Variable";
                case 2:
                    return " ";
                default:
                    return "";
            }
        }

        @Override
        public Object getValueAt(int row, int column) {
            String modificationName = modifications.get(row);
            switch (column) {
                case 0:
                    return fixedModifications.get(modificationName);
                case 1:
                    return variableModifications.get(modificationName);
                case 2:
                    return modificationName;
                default:
                    return "";
            }
        }

        @Override
        public Class getColumnClass(int columnIndex) {
            for (int i = 0; i < getRowCount(); i++) {
                if (getValueAt(i, columnIndex) != null) {
                    return getValueAt(i, columnIndex).getClass();
                }
            }
            return String.class;
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return columnIndex == 0 || columnIndex == 1;
        }

        @Override
        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
            if (columnIndex == 0) {
                String modificationName = modifications.get(rowIndex);
                Boolean value = (Boolean) aValue;
                fixedModifications.put(modificationName, value);
                if (value) {
                    variableModifications.put(modificationName, false);
                }
            } else if (columnIndex == 0) {
                String modificationName = modifications.get(rowIndex);
                Boolean value = (Boolean) aValue;
                variableModifications.put(modificationName, value);
                if (value) {
                    fixedModifications.put(modificationName, false);
                }
            }
        }
    }
}
